#include <stdio.h>
#include<time.h>
clock_t startC, endC;
double cpu;
void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}
int partition(int array[], int low, int high) {
int pivot = array[low];
int start = low;
int end = high;
while(start< end)
{
    while(array[start]<=pivot)
    {
    start++;
    }
    while(array[end]>pivot)
    {
        end--;
    }
    if(start<end)
    {
        swap(&array[start],&array[end]);
    }
}
swap(&array[low],&array[end]);
return end;
}

void quickSort(int array[], int low, int high) {
  if (low < high) {
    int pi = partition(array, low, high);
    quickSort(array, low, pi - 1);
    quickSort(array, pi + 1, high);
  }
}
int main() {
  int data[] = {8, 7, 2, 1, 0, 9, 6};
  int n = sizeof(data) / sizeof(data[0]);
  printf("Unsorted Array\n");
 for (int i = 0; i < n; ++i) {
    printf("%d  ", data[i]);
  }
  startC = clock();
  quickSort(data, 0, n - 1);
  endC = clock();
  printf("Sorted array in ascending order: \n");
 for (int i = 0; i < n; ++i) {
    printf("%d  ", data[i]);
  }
  cpu = ((double)(endC-startC))/CLOCKS_PER_SEC;
  printf("the time taken is %d",cpu);
}
