
InsertionSort(A[0..n − 1])
 //Sorts a given array by insertion sort
 //Input: An array A[0..n − 1] of n orderable elements 
//Output: Array A[0..n − 1] sorted in nondecreasing order
 for i ← 1 to n – 1 do
 v ← A[i] 
j ← i – 1
 while j ≥ 0 and A[j ] > v do
 A[j + 1]← A[j ]
 j ← j – 1
 A[j + 1] ← v

Program:          

#include <stdio.h>
#include<time.h>
clock_t start, end;
double cpu_time;

void insertionSort(int array[], int size) {
  for (int i = 1; i < size; i++) {
    int temp = array[i];
    int j = i- 1;
    while (temp < array[j] && j >= 0) {
      array[j + 1] = array[j];
      --j;
    }
    array[j + 1] = temp;
  }
}
// Driver code
int main() {
  int data[] = {8, 9, 1, 6, 2};
  int size = sizeof(data) / sizeof(data[0]);
  start = clock();
  insertionSort(data, size);
  end= clock();
  printf("Sorted array in ascending order:\n");
   for (int i = 0; i < size; i++) {
    printf("%d ", data[i]);
  }
  cpu_time = ((double)(end-start))/CLOCKS_PER_SEC;
  printf("the time taken is %d",cpu_time);

}
